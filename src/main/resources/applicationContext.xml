<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cxf="http://cxf.apache.org/jaxws"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                        http://cxf.apache.org/jaxws
                        http://cxf.apache.org/schemas/jaxws.xsd">

    <import resource="classpath:/META-INF/cxf/cxf.xml"/>
    <import resource="classpath:/META-INF/cxf/cxf-servlet.xml"/>

    <jaxws:endpoint id="webservice"
                    implementor="com.yucong.webservice.impl.HelloWordImpl"
                    address="/hello" />
    <!-- 访问路径： http://localhost:8080/ssm/ssm/hello?wsdl -->
    <jaxws:endpoint id="mysql"
                    implementor="com.yucong.service.UserService"
                    address="/mysql" />


    <!-- 容器自动扫描IOC组件  -->
    <context:component-scan base-package="com.yucong" />

    <!-- 引入配置文件,为简化PropertyPlaceholderConfigurer的使用，Spring提供了<context:property-placeholder/>元素 -->
	<!-- <context:property-placeholder location="dbconfig.properties"/> -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:dbconfig.properties"/>
    </bean>

    <!-- 数据源配置,使用应用内的DBCP数据库连接池     -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 具体指定xml文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- sql映射文件路径 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.yucong.model" />
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<!-- 指定要自动扫描接口的基础包，实现接口 -->
        <property name="basePackage" value="com.yucong.client" />
        <!--指定会话工厂，如果当前上下文中只定义了一个则该属性可省去 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 配置事务管理器，引入数据源 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 指明使用注解的方式来管理事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>